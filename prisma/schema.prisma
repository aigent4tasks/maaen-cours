// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  progress      Progress[]
  reviews       Review[]
  discussions   Discussion[]
  replies       Reply[]
  courses       Course[]  @relation("InstructorCourses")
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]

  @@map("categories")
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  price       Float       @default(0)
  level       CourseLevel @default(BEGINNER)
  status      CourseStatus @default(DRAFT)
  language    String      @default("ar")
  duration    Int?        // in minutes
  instructorId String
  categoryId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  instructor   User        @relation("InstructorCourses", fields: [instructorId], references: [id])
  category     Category?   @relation(fields: [categoryId], references: [id])
  lessons      Lesson[]
  enrollments  Enrollment[]
  reviews      Review[]
  discussions  Discussion[]

  @@map("courses")
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  content     String?
  videoUrl    String?
  duration    Int?        // in minutes
  order       Int
  type        LessonType  @default(VIDEO)
  isPublished Boolean     @default(false)
  isFree      Boolean     @default(false)
  courseId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  discussions Discussion[]

  @@map("lessons")
}

model Enrollment {
  id             String           @id @default(cuid())
  userId         String
  courseId       String
  status         EnrollmentStatus @default(ACTIVE)
  progress       Float            @default(0) // Progress percentage
  enrolledAt     DateTime         @default(now())
  completedAt    DateTime?

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress Progress[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  enrollmentId String
  completed    Boolean  @default(false)
  completedAt  DateTime?
  watchTime    Int      @default(0) // in seconds
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson       Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int      // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Discussion {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  courseId  String?
  lessonId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  replies   Reply[]

  @@map("discussions")
}

model Reply {
  id           String   @id @default(cuid())
  content      String
  userId       String
  discussionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@map("replies")
}

// Enums
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  ASSIGNMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}